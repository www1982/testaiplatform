name: Build Desktop Debugger

on:
  push:
    branches: [main, develop]
    tags:
      - "v*"
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.9
          activate-environment: oni-ai-env
          environment-file: environment.yml
          auto-activate-base: false

      - name: Verify environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
          python --version

      - name: Install PyInstaller
        shell: bash -l {0}
        run: |
          pip install pyinstaller>=5.13.0

      - name: Create PyInstaller spec file
        shell: bash -l {0}
        run: |
          cat > debugger.spec << 'EOF'
          # -*- mode: python ; coding: utf-8 -*-

          block_cipher = None

          a = Analysis(
              ['desktop_debugger/main.py'],
              pathex=['.'],
              binaries=[],
              datas=[
                  ('oni_api_client', 'oni_api_client'),
              ],
              hiddenimports=[
                  'PySide6',
                  'PySide6.QtCore',
                  'PySide6.QtGui',
                  'PySide6.QtWidgets',
                  'pyqtgraph',
                  'numpy',
                  'websockets',
                  'asyncio',
                  'json',
                  'dataclasses',
                  'typing',
                  'queue',
                  'threading'
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=['torch', 'tensorflow', 'matplotlib'],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='ONI_AI_Debugger',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=False,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
              icon=None
          )
          EOF

      - name: Build executable with PyInstaller
        shell: bash -l {0}
        run: |
          pyinstaller debugger.spec --clean

      - name: Test executable
        shell: bash -l {0}
        run: |
          # Basic test to ensure exe was created
          test -f dist/ONI_AI_Debugger.exe
          ls -la dist/

      - name: Create release archive
        shell: bash -l {0}
        run: |
          cd dist
          7z a -tzip ONI_AI_Debugger_Windows.zip ONI_AI_Debugger.exe
          cd ..

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ONI_AI_Debugger_Windows
          path: dist/ONI_AI_Debugger_Windows.zip
          retention-days: 30

      - name: Create Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/ONI_AI_Debugger_Windows.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.9
          activate-environment: oni-ai-env
          environment-file: environment.yml
          auto-activate-base: false

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1 \
            libgstreamer-gl1.0-0 \
            libgstreamer-plugins-base1.0-0

      - name: Install PyInstaller
        shell: bash -l {0}
        run: |
          pip install pyinstaller>=5.13.0

      - name: Build executable with PyInstaller
        shell: bash -l {0}
        run: |
          pyinstaller \
            --onefile \
            --windowed \
            --name ONI_AI_Debugger \
            --add-data "oni_api_client:oni_api_client" \
            --hidden-import PySide6 \
            --hidden-import pyqtgraph \
            --hidden-import websockets \
            --exclude-module torch \
            --exclude-module tensorflow \
            desktop_debugger/main.py

      - name: Create release archive
        run: |
          cd dist
          tar -czf ONI_AI_Debugger_Linux.tar.gz ONI_AI_Debugger
          cd ..

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ONI_AI_Debugger_Linux
          path: dist/ONI_AI_Debugger_Linux.tar.gz
          retention-days: 30
